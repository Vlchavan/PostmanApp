@{
    ViewData["Title"] = "Postman Clone";
}

<div class="min-h-screen bg-gray-100 font-sans text-gray-800 p-4 flex flex-col md:flex-row gap-4">
    <!-- Request Section -->
    <div class="flex-1 bg-white p-6 rounded-lg shadow-lg flex flex-col">
        <h2 class="text-2xl font-bold mb-6 text-indigo-700">Request Details</h2>

        <!-- URL Input -->
        <div class="mb-4">
            <label for="url" class="block text-sm font-medium text-gray-700 mb-1">
                URL
            </label>
            <input type="text"
                   id="url"
                   class="w-full p-3 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 ease-in-out"
                   placeholder="e.g., [https://api.example.com/data](https://api.example.com/data)" />
        </div>

        <!-- Method Selector -->
        <div class="mb-4">
            <label for="method" class="block text-sm font-medium text-gray-700 mb-1">
                Method
            </label>
            <select id="method"
                    class="w-full p-3 border border-gray-300 rounded-md bg-white focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 ease-in-out">
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
                <option value="PATCH">PATCH</option>
                <option value="HEAD">HEAD</option>
                <option value="OPTIONS">OPTIONS</option>
            </select>
        </div>

        <!-- Authentication Section -->
        <div class="mb-4 p-4 border border-gray-200 rounded-md bg-gray-50">
            <label for="authType" class="block text-sm font-medium text-gray-700 mb-2">
                Authentication
            </label>
            <select id="authType"
                    class="w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 ease-in-out mb-3">
                <option value="noAuth">No Auth</option>
                <option value="bearerToken">Bearer Token</option>
                <option value="basicAuth">Basic Auth</option>
                <option value="apiKey">API Key</option>
            </select>

            <div id="bearerTokenAuth" class="auth-config hidden">
                <label for="bearerToken" class="block text-sm font-medium text-gray-700 mb-1">
                    Token
                </label>
                <input type="text"
                       id="bearerToken"
                       class="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                       placeholder="Enter Bearer Token" />
            </div>

            <div id="basicAuth" class="auth-config hidden flex flex-col gap-2">
                <div>
                    <label for="basicUsername" class="block text-sm font-medium text-gray-700 mb-1">
                        Username
                    </label>
                    <input type="text"
                           id="basicUsername"
                           class="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                           placeholder="Enter Username" />
                </div>
                <div>
                    <label for="basicPassword" class="block text-sm font-medium text-gray-700 mb-1">
                        Password
                    </label>
                    <input type="password"
                           id="basicPassword"
                           class="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                           placeholder="Enter Password" />
                </div>
            </div>

            <div id="apiKeyAuth" class="auth-config hidden flex flex-col gap-2">
                <div>
                    <label for="apiKeyKey" class="block text-sm font-medium text-gray-700 mb-1">
                        API Key
                    </label>
                    <input type="text"
                           id="apiKeyKey"
                           class="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                           placeholder="Key (e.g., X-API-Key)" />
                </div>
                <div>
                    <label for="apiKeyValue" class="block text-sm font-medium text-gray-700 mb-1">
                        Value
                    </label>
                    <input type="text"
                           id="apiKeyValue"
                           class="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
                           placeholder="API Key Value" />
                </div>
                <div class="mt-2">
                    <label for="apiKeyAddTo" class="block text-sm font-medium text-gray-700 mb-1">
                        Add to
                    </label>
                    <select id="apiKeyAddTo"
                            class="w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="header">Header</option>
                        <option value="query">Query Parameters</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Headers Input - Configurable -->
        <div class="mb-4 flex-1 flex flex-col">
            <label class="block text-sm font-medium text-gray-700 mb-2">
                Headers
            </label>
            <div id="headersContainer">
                <div class="flex gap-2 mb-2 items-center header-row">
                    <input type="text" class="flex-1 p-2 border border-gray-300 rounded-md text-sm focus:ring-indigo-500 focus:border-indigo-500 header-key" placeholder="Key" />
                    <input type="text" class="flex-1 p-2 border border-gray-300 rounded-md text-sm focus:ring-indigo-500 focus:border-indigo-500 header-value" placeholder="Value" />
                    <button onclick="removeHeader(this.parentNode)" class="p-2 bg-red-500 text-white rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition duration-150 ease-in-out remove-header-btn" title="Remove Header" style="display:none;">
                        <svg xmlns="[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
            <button id="addHeaderBtn"
                    class="mt-2 py-2 px-4 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 transition duration-150 ease-in-out text-sm">
                + Add Header
            </button>
        </div>

        <!-- Body Input (conditionally rendered) -->
        <div id="bodyInputSection" class="mb-6 flex-1 flex flex-col hidden">
            <label for="body" class="block text-sm font-medium text-gray-700 mb-1">
                Request Body
            </label>
            <textarea id="body"
                      class="w-full p-3 border border-gray-300 rounded-md font-mono text-sm resize-y flex-1 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 ease-in-out"
                      rows="8"
                      placeholder='{"key": "value"}'></textarea>
        </div>

        <!-- Send Button -->
        <button id="sendRequestBtn"
                class="w-full bg-indigo-600 text-white py-3 rounded-md font-semibold text-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-150 ease-in-out shadow-md">
            Send Request
        </button>
    </div>

    <!-- Response Section -->
    <div class="flex-1 bg-white p-6 rounded-lg shadow-lg flex flex-col">
        <h2 class="text-2xl font-bold mb-6 text-green-700">Response</h2>

        <div id="loadingIndicator" class="hidden flex items-center justify-center h-full">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
            <p class="ml-3 text-lg text-indigo-600">Loading response...</p>
        </div>

        <div id="errorDisplay" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Error!</strong>
            <span id="errorMessage" class="block sm:inline ml-2"></span>
        </div>

        <div id="responseDisplay" class="hidden flex-1 flex flex-col overflow-auto">
            <!-- Response Status and Time -->
            <div class="mb-4 border-b pb-2">
                <p class="text-lg font-medium">
                    Status: <span id="responseStatus" class=""></span>
                </p>
                <p class="text-sm text-gray-600">Time: <span id="responseTime"></span> ms</p>
            </div>

            <!-- View Mode Tabs/Buttons -->
            <div id="viewModeButtons" class="mb-4 flex flex-wrap gap-2">
                <button class="px-4 py-2 rounded-md text-sm font-medium bg-indigo-600 text-white" data-view="raw">
                    Raw
                </button>
                <button class="px-4 py-2 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300 hidden" data-view="json">
                    JSON
                </button>
                <button class="px-4 py-2 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300 hidden" data-view="xml">
                    XML
                </button>
                <button class="px-4 py-2 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300 hidden" data-view="html">
                    HTML
                </button>
            </div>

            <!-- Response Headers -->
            <div class="mb-4">
                <h3 class="text-md font-semibold text-gray-700 mb-2">Headers</h3>
                <pre id="responseHeaders" class="bg-gray-50 p-3 rounded-md text-sm whitespace-pre-wrap break-words overflow-auto max-h-48 border border-gray-200"></pre>
            </div>

            <!-- Response Body - Conditional Rendering -->
            <div class="flex-1 min-h-[200px]">
                <h3 class="text-md font-semibold text-gray-700 mb-2">Body</h3>
                <pre id="responseBodyRaw" class="bg-gray-50 p-3 rounded-md text-sm whitespace-pre-wrap break-words overflow-auto h-full border border-gray-200 body-view"></pre>
                <pre id="responseBodyJson" class="bg-gray-50 p-3 rounded-md text-sm whitespace-pre-wrap break-words overflow-auto h-full border border-gray-200 body-view hidden"></pre>
                <pre id="responseBodyXml" class="bg-gray-50 p-3 rounded-md text-sm whitespace-pre-wrap break-words overflow-auto h-full border border-gray-200 body-view hidden"></pre>
                <iframe id="responseBodyHtml" title="HTML Response" class="w-full h-full border border-gray-200 rounded-md bg-white body-view hidden" sandbox="allow-scripts allow-same-origin"></iframe>
                <div id="viewModeInfo" class="hidden bg-orange-100 border border-orange-400 text-orange-700 px-4 py-3 rounded relative mb-4" role="alert">
                    <strong class="font-bold">Info!</strong>
                    <span id="viewModeInfoMessage" class="block sm:inline ml-2"></span>
                </div>
            </div>
        </div>

        <div id="initialMessage" class="flex items-center justify-center h-full text-gray-500 text-lg">
            Send a request to see the response here.
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // === DOM Elements ===
        const urlInput = document.getElementById('url');
        const methodSelect = document.getElementById('method');
        const authTypeSelect = document.getElementById('authType');
        const bearerTokenAuth = document.getElementById('bearerTokenAuth');
        const basicAuth = document.getElementById('basicAuth');
        const apiKeyAuth = document.getElementById('apiKeyAuth');
        const bearerTokenInput = document.getElementById('bearerToken');
        const basicUsernameInput = document.getElementById('basicUsername');
        const basicPasswordInput = document.getElementById('basicPassword');
        const apiKeyKeyInput = document.getElementById('apiKeyKey');
        const apiKeyValueInput = document.getElementById('apiKeyValue');
        const apiKeyAddToSelect = document.getElementById('apiKeyAddTo');
        const headersContainer = document.getElementById('headersContainer');
        const addHeaderBtn = document.getElementById('addHeaderBtn');
        const bodyInputSection = document.getElementById('bodyInputSection');
        const bodyTextarea = document.getElementById('body');
        const sendRequestBtn = document.getElementById('sendRequestBtn');

        const loadingIndicator = document.getElementById('loadingIndicator');
        const errorDisplay = document.getElementById('errorDisplay');
        const errorMessageSpan = document.getElementById('errorMessage');
        const responseDisplay = document.getElementById('responseDisplay');
        const responseStatusSpan = document.getElementById('responseStatus');
        const responseTimeSpan = document.getElementById('responseTime');
        const responseHeadersPre = document.getElementById('responseHeaders');
        const responseBodyRawPre = document.getElementById('responseBodyRaw');
        const responseBodyJsonPre = document.getElementById('responseBodyJson');
        const responseBodyXmlPre = document.getElementById('responseBodyXml');
        const responseBodyHtmlIframe = document.getElementById('responseBodyHtml');
        const viewModeButtonsContainer = document.getElementById('viewModeButtons');
        const viewModeInfoDiv = document.getElementById('viewModeInfo');
        const viewModeInfoMessageSpan = document.getElementById('viewModeInfoMessage');
        const initialMessage = document.getElementById('initialMessage');

        // === State Variables (simulating React state) ===
        let currentResponse = null;
        let currentViewMode = 'raw'; // Default view mode

        // === Utility Functions ===
        let nextHeaderId = 0; // Ensure unique IDs for headers

        function updateRemoveHeaderButtons() {
            const headerRows = headersContainer.querySelectorAll('.header-row');
            headerRows.forEach(row => {
                const removeBtn = row.querySelector('.remove-header-btn');
                if (removeBtn) {
                    removeBtn.style.display = headerRows.length > 1 ? 'inline-flex' : 'none';
                }
            });
        }

        // Function to add a new empty header row
        function addHeader() {
            const newHeaderRow = document.createElement('div');
            newHeaderRow.className = 'flex gap-2 mb-2 items-center header-row';
            newHeaderRow.setAttribute('data-id', nextHeaderId++); // Assign a unique ID

            newHeaderRow.innerHTML = `
                <input type="text" class="flex-1 p-2 border border-gray-300 rounded-md text-sm focus:ring-indigo-500 focus:border-indigo-500 header-key" placeholder="Key" />
                <input type="text" class="flex-1 p-2 border border-gray-300 rounded-md text-sm focus:ring-indigo-500 focus:border-indigo-500 header-value" placeholder="Value" />
                <button onclick="removeHeader(this.parentNode)" class="p-2 bg-red-500 text-white rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition duration-150 ease-in-out remove-header-btn" title="Remove Header">
                    <svg xmlns="[http://www.w3.org/2000/svg](http://www.w3.org/2000/svg)" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            `;
            headersContainer.appendChild(newHeaderRow);
            updateRemoveHeaderButtons(); // Update button visibility
        }

        // Function to remove a header row
        function removeHeader(headerRowElement) {
            if (headersContainer.querySelectorAll('.header-row').length > 1) {
                headerRowElement.remove();
                updateRemoveHeaderButtons(); // Update button visibility
            }
        }

        // Function to show/hide auth config sections
        function updateAuthConfigVisibility() {
            const selectedAuthType = authTypeSelect.value;
            document.querySelectorAll('.auth-config').forEach(el => el.classList.add('hidden'));

            if (selectedAuthType === 'bearerToken') {
                bearerTokenAuth.classList.remove('hidden');
            } else if (selectedAuthType === 'basicAuth') {
                basicAuth.classList.remove('hidden');
            } else if (selectedAuthType === 'apiKey') {
                apiKeyAuth.classList.remove('hidden');
            }
        }

        // Function to toggle visibility of body input based on method
        function updateBodyInputVisibility() {
            const selectedMethod = methodSelect.value;
            if (['POST', 'PUT', 'PATCH'].includes(selectedMethod)) {
                bodyInputSection.classList.remove('hidden');
            } else {
                bodyInputSection.classList.add('hidden');
            }
        }

        // Function to display the response body based on view mode
        function displayResponseBody() {
            document.querySelectorAll('.body-view').forEach(el => el.classList.add('hidden'));
            viewModeInfoDiv.classList.add('hidden');

            if (!currentResponse) return;

            const contentType = currentResponse.contentType;
            let displayedContent = '';
            let infoMessage = '';
            let targetElement;

            if (currentViewMode === 'raw') {
                targetElement = responseBodyRawPre;
                displayedContent = currentResponse.rawBodyText;
            } else if (currentViewMode === 'json') {
                if (contentType && contentType.includes('application/json')) {
                    targetElement = responseBodyJsonPre;
                    displayedContent = JSON.stringify(currentResponse.body, null, 2);
                } else {
                    targetElement = responseBodyRawPre; // Fallback to raw
                    displayedContent = currentResponse.rawBodyText;
                    infoMessage = 'This response is not detected as JSON. Displaying raw text instead.';
                }
            } else if (currentViewMode === 'xml') {
                if (contentType && (contentType.includes('application/xml') || contentType.includes('text/xml'))) {
                    targetElement = responseBodyXmlPre;
                    displayedContent = currentResponse.rawBodyText;
                } else {
                    targetElement = responseBodyRawPre; // Fallback to raw
                    displayedContent = currentResponse.rawBodyText;
                    infoMessage = 'This response is not detected as XML. Displaying raw text instead.';
                }
            } else if (currentViewMode === 'html') {
                if (contentType && contentType.includes('text/html')) {
                    targetElement = responseBodyHtmlIframe;
                    responseBodyHtmlIframe.srcdoc = currentResponse.rawBodyText; // Set srcdoc for iframe
                    responseBodyHtmlIframe.classList.remove('hidden'); // Show iframe directly
                } else {
                    targetElement = responseBodyRawPre; // Fallback to raw
                    displayedContent = currentResponse.rawBodyText;
                    infoMessage = 'This response is not detected as HTML. Displaying raw text instead.';
                }
            }

            if (targetElement && targetElement.tagName !== 'IFRAME') {
                targetElement.textContent = displayedContent;
                targetElement.classList.remove('hidden');
            }

            if (infoMessage) {
                viewModeInfoMessageSpan.textContent = infoMessage;
                viewModeInfoDiv.classList.remove('hidden');
            }
        }

        // Function to update view mode buttons' active state
        function updateViewModeButtons() {
            const buttons = viewModeButtonsContainer.querySelectorAll('button');
            buttons.forEach(btn => {
                if (btn.dataset.view === currentViewMode) {
                    btn.classList.remove('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
                    btn.classList.add('bg-indigo-600', 'text-white');
                } else {
                    btn.classList.remove('bg-indigo-600', 'text-white');
                    btn.classList.add('bg-gray-200', 'text-gray-700', 'hover:bg-gray-300');
                }

                // Hide/show buttons based on content type
                if (currentResponse) {
                    const contentType = currentResponse.contentType;
                    const viewType = btn.dataset.view;
                    if (viewType === 'json' && (!contentType || !contentType.includes('application/json'))) {
                        btn.classList.add('hidden');
                    } else if (viewType === 'xml' && (!contentType || (!contentType.includes('application/xml') && !contentType.includes('text/xml')))) {
                        btn.classList.add('hidden');
                    } else if (viewType === 'html' && (!contentType || !contentType.includes('text/html'))) {
                        btn.classList.add('hidden');
                    } else {
                        btn.classList.remove('hidden');
                    }
                } else {
                    // Hide all except raw if no response yet
                    if (btn.dataset.view !== 'raw') {
                         btn.classList.add('hidden');
                    }
                }
            });
        }

        // === Main Request Sending Logic ===
        async function sendRequest() {
            // Clear previous state and show loading
            loadingIndicator.classList.remove('hidden');
            errorDisplay.classList.add('hidden');
            responseDisplay.classList.add('hidden');
            initialMessage.classList.add('hidden');
            currentResponse = null;
            currentViewMode = 'raw'; // Reset view mode

            sendRequestBtn.disabled = true;
            sendRequestBtn.textContent = 'Sending...';

            const url = urlInput.value.trim();
            const method = methodSelect.value;
            const headersData = {};

            // Get headers from UI
            headersContainer.querySelectorAll('.header-row').forEach(row => {
                const key = row.querySelector('.header-key').value.trim();
                const value = row.querySelector('.header-value').value;
                if (key !== '') {
                    headersData[key] = value;
                }
            });

            let requestUrl = url;

            // Apply authentication
            const authType = authTypeSelect.value;
            if (authType === 'bearerToken') {
                const token = bearerTokenInput.value.trim();
                if (token) {
                    headersData['Authorization'] = `Bearer ${token}`;
                }
            } else if (authType === 'basicAuth') {
                const username = basicUsernameInput.value.trim();
                const password = basicPasswordInput.value.trim();
                if (username && password) {
                    const credentials = btoa(`${username}:${password}`);
                    headersData['Authorization'] = `Basic ${credentials}`;
                }
            } else if (authType === 'apiKey') {
                const apiKeyKey = apiKeyKeyInput.value.trim();
                const apiKeyValue = apiKeyValueInput.value.trim();
                const apiKeyAddTo = apiKeyAddToSelect.value;
                if (apiKeyKey && apiKeyValue) {
                    if (apiKeyAddTo === 'header') {
                        headersData[apiKeyKey] = apiKeyValue;
                    } else if (apiKeyAddTo === 'query') {
                        try {
                            const urlObj = new URL(requestUrl);
                            urlObj.searchParams.append(apiKeyKey, apiKeyValue);
                            requestUrl = urlObj.toString();
                        } catch (e) {
                            console.error('Invalid URL for API Key in query:', e);
                            displayError(`Invalid URL for API Key in query: ${e.message}`);
                            return; // Stop execution
                        }
                    }
                }
            }

            const requestOptions = {
                method: method,
                headers: headersData,
            };

            if (['POST', 'PUT', 'PATCH'].includes(method)) {
                requestOptions.body = bodyTextarea.value;
            }

            try {
                const startTime = performance.now();
                const res = await fetch(requestUrl, requestOptions);
                const endTime = performance.now();
                const duration = (endTime - startTime).toFixed(2);

                const responseHeaders = {};
                res.headers.forEach((value, name) => {
                    responseHeaders[name] = value;
                });

                const contentType = res.headers.get('Content-Type');
                const rawResponseText = await res.text();
                let responseBodyData;

                if (contentType && contentType.includes('application/json')) {
                    try {
                        responseBodyData = JSON.parse(rawResponseText);
                        currentViewMode = 'json';
                    } catch (e) {
                        responseBodyData = rawResponseText;
                        currentViewMode = 'raw';
                    }
                } else if (contentType && contentType.includes('text/html')) {
                    responseBodyData = rawResponseText;
                    currentViewMode = 'html';
                } else if (contentType && (contentType.includes('application/xml') || contentType.includes('text/xml'))) {
                    responseBodyData = rawResponseText;
                    currentViewMode = 'xml';
                } else {
                    responseBodyData = rawResponseText;
                    currentViewMode = 'raw';
                }

                currentResponse = {
                    status: res.status,
                    statusText: res.statusText,
                    headers: responseHeaders,
                    body: responseBodyData,
                    rawBodyText: rawResponseText,
                    time: duration,
                    contentType: contentType,
                };

                displayResponse(currentResponse);

            } catch (err) {
                console.error('Request failed:', err);
                displayError(`Failed to send request: ${err.message}. Please check URL and inputs.`);
            } finally {
                loadingIndicator.classList.add('hidden');
                sendRequestBtn.disabled = false;
                sendRequestBtn.textContent = 'Send Request';
            }
        }

        // Function to display error messages
        function displayError(message) {
            errorDisplay.classList.remove('hidden');
            errorMessageSpan.textContent = message;
            responseDisplay.classList.add('hidden');
            initialMessage.classList.add('hidden');
        }

        // Function to display the API response
        function displayResponse(response) {
            errorDisplay.classList.add('hidden');
            initialMessage.classList.add('hidden');
            responseDisplay.classList.remove('hidden');

            responseStatusSpan.textContent = `${response.status} ${response.statusText}`;
            responseStatusSpan.className = response.status >= 200 && response.status < 300 ? 'text-green-600' : 'text-red-600';
            responseTimeSpan.textContent = response.time;
            responseHeadersPre.textContent = JSON.stringify(response.headers, null, 2);

            updateViewModeButtons(); // Update button visibility based on content type
            displayResponseBody(); // Display body based on current view mode
        }

        // === Event Listeners ===
        window.addEventListener('load', () => {
            // Initial setup
            updateAuthConfigVisibility();
            updateBodyInputVisibility();
            updateRemoveHeaderButtons(); // Hide remove button for the single initial header

            // Add default empty header
            if (headersContainer.querySelectorAll('.header-row').length === 0) {
                 addHeader();
            }
        });

        authTypeSelect.addEventListener('change', updateAuthConfigVisibility);
        methodSelect.addEventListener('change', updateBodyInputVisibility);
        addHeaderBtn.addEventListener('click', addHeader);
        sendRequestBtn.addEventListener('click', sendRequest);

        // Event delegation for view mode buttons
        viewModeButtonsContainer.addEventListener('click', (event) => {
            const targetButton = event.target.closest('button[data-view]');
            if (targetButton) {
                currentViewMode = targetButton.dataset.view;
                updateViewModeButtons();
                displayResponseBody();
            }
        });
    </script>
}